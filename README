# 1.    Was a valid GitHub URL containing a git repository submitted?
# 2.    Does the GitHub repository contain at least one commit beyond the original fork?
# 3.    Was a SHA-1 submitted indicating a specific commit in the GitHub repository?
# 4.    If a SHA-1 was submitted along with the GitHub URL, does the SHA-1
#       correspond to a specific commit in the repository?

# Overall evaluation/feedback
# 1.    Does the GitHub repository contain an R file containing code implementing the completed assignment? 
# 2.    Does the R file containing the code have any comments explaining what
#       the code does? NOTE: The makeCacheMatrix and cacheSolve functions should both
#       be documented with explanatory comments. There maybe other functions in the R
#       file but they do not need to be commented.
# 3.    Does the R code implementing the 'makeCacheMatrix' function appear to be
#       correct, to the best of your ability to judge?
# 4.    Does the R code implementing the 'cacheSolve' function appear to be
#       correct, to the best of your ability to judge?


# Test cases
tm1<-matrix(c(c(2:4),c(1,3,7),c(4,7,13)),nrow=3,byrow=TRUE)
print(solve(tm1))

tm2 <- matrix(rnorm(100),10,10)
print(solve(tm2))



# makeVector <- function(x = numeric()) {
#     m <- NULL
#     set <- function(y) {
#         x <<- y
#         m <<- NULL
#     }
#     get <- function() x
#     setmean <- function(mean) m <<- mean
#     getmean <- function() m
#     list(set = set, get = get,
#          setmean = setmean,
#          getmean = getmean)
# }
# 
# cachemean <- function(x, ...) {
#     m <- x$getmean()
#     if(!is.null(m)) {
#         message("getting cached data")
#         return(m)
#     }
#     data <- x$get()
#     m <- mean(data, ...)
#     x$setmean(m)
#     m
# }

